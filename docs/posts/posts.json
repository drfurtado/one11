[
  {
    "path": "posts/2020-12-29-creating-line-grapghs-with-r/",
    "title": "Lines Graph with R and SPSS",
    "description": "Creating line graphs with R and SPSS",
    "author": [
      {
        "name": "Ovande Furtado",
        "url": "https://drfurtado.us"
      }
    ],
    "date": "2020-12-14",
    "categories": [
      "R",
      "Graphs",
      "Descriptive Stats"
    ],
    "contents": "\n\nContents\nIntroduction\nSingle line graph with R\nMultiple lines graph with R\nMultiple lines graph (with legends) with R\nSingle line graph with SPSS\n\n\nIntroduction\nR and RStudio are two great tools for creating graphs. Although I think SPSS scores high on the graph creation category, it has several limitations. Arguably, its main shortcoming has to do with the lack of flexibility. This is not the case with R and RStudio.\nBelow, I will show how to create beautiful graphs with R and RStudio.\nI will get started with line graphs.\nSingle line graph with R\nTo follow along, open RStudio, then create a new R script1. Then, copy and paste each chunk of code into the newly created script.\nFinally, run separately each step (chunk of code) to create a Single line graph. We will start with Step 1, then run Step 2 to create the graph shown in Figure 1. Notice that this graph does not have the lines (or titles), yet.\nStep 1\n\n\n# Step 1: Create two variables (x, y) and assign numbers to each\nx <- c(1:5)\ny <- c(12,18,22,20,28)\n\n\n\nStep 2\n\n\n# Step 2: Create a Single plot\nplot(x, y)\n\n\n\n\nFigure 1: Single\n\n\n\nStep 3\n\n\n# Step 3: Let's add labels for x and y and a title for the plot\nplot(x, y, xlab = \"x var title\", ylab = \"y var title\", main = \"Title\")\n\n\n\n\nFigure 2: Single\n\n\n\nStep 4\n\n\n# Step 4: Let's draw a line\nplot(x, y, xlab = \"x var title\", ylab = \"y var title\", main = \"Title\", \n     type = \"o\")\n\n\n\n\nFigure 3: Single\n\n\n\nStep 5\n\n\n# Step 5: Let's change the density and color of the line and dots\nplot(x, y, xlab = \"x var title\", ylab = \"y var title\", main = \"Title\", \n     type = \"o\", pch = 20, lwd = 2, col = \"blue\")\n\n\n\n\nFigure 4: Single graph line with titles\n\n\n\nMultiple lines graph with R\nThe R script for this section was adapted from: http://bit.ly/34fDitr\nTo accomplish this task, you will need to use three other functions in R: points() and lines()\nWhat you need to know\nThree groups were tested 5 times (once every week for a period of 5 weeks) on BMI (body mass index). For a period of five weeks, two groups engaged in a physical fitness program whereas G1 did not exercise at all. Using this information, plot BMI changes over time for the three groups.\nGroup 1 (G1) = No exercise (control group)\nGroup 2 (G2) = Traditional fitness program\nGroup 3 (G3) = New fitness program\nStep 1\n\n\n# define 3 data sets\ntime <- c(1,2,3,4,5) # or simply c(1:5)\ny1 <- c(24,24,26,23,25)      # Group 1\ny2 <- c(28, 25, 26, 25, 24)  # Group 2\ny3 <- c(30,30, 28, 26, 25)   # Group 3\n\n\n\nStep 2\n\n\n# plot the first curve by calling plot() function\n# First curve is plotted\nplot(time, y1, type=\"o\", col=\"blue\", pch=\"o\", lty=1, ylim=c(0,50))\n\n\n\n\nFigure 5: Multi\n\n\n\nStep 3\n\n\n# Add second curve to the same plot by calling points() and lines()\n# Use symbol '*' for points.\nplot(time, y1, type=\"o\", col=\"blue\", pch=\"o\", lty=1, ylim=c(0,50))\npoints(time, y2, col=\"red\", pch='*')\nlines(time, y2, col=\"red\",lty=2)\n\n\n\n\nFigure 6: Multi\n\n\n\nStep 4\n\n\n# Add Third curve to the same plot by calling points() and lines()\n# Use symbol '+' for points.\nplot(time, y1, type=\"o\", col=\"blue\", pch=\"o\", lty=1, ylim=c(0,50))\npoints(time, y2, col=\"red\", pch='*')\nlines(time, y2, col=\"red\",lty=2)\npoints(time, y3, col=\"dark red\",pch=\"+\")\nlines(time, y3, col=\"dark red\", lty=3)\n\n\n\n\nFigure 7: Multi\n\n\n\nAfter running the script above, you will notice an empty space on the top-half of the plot. So, change the following: (1) Change the ylim argument to 20, 35. This will improve the look of the plot. (2) In addition, add labels to y and x and a main title to the plot. Refer to Figure 2 for more details.\nStep 5\n\n\n# Add Third curve to the same plot by calling points() and lines()\n# Use symbol '+' for points.\nplot(time, y1, xlab = \"x var title\", ylab = \"y var title\", main = \"Title\", type=\"o\", col=\"blue\", pch=\"o\", lty=1, ylim=c(20,35))\npoints(time, y2, col=\"red\", pch='*')\nlines(time, y2, col=\"red\",lty=2)\npoints(time, y3, col=\"dark red\",pch=\"+\")\nlines(time, y3, col=\"dark red\", lty=3)\n\n\n\n\nFigure 8: Multi\n\n\n\nMultiple lines graph (with legends) with R\nBelow is the R script to create a plot with multiple lines and a legend. To do this, create a new script, then paste the script below into RStudio and run the script the same way it was done previously.\nStep 1\n\n\n# define 3 data sets\nxtime <- c(1,2,3,4,5) # or simply c(1:5)\ny1 <- c(24,24,26,23,25)     # Group 1\ny2 <- c(28,25,26,25,24)     # Group 2\ny3 <- c(30,30,28,26,25)     # Group 3\n\n\n\nStep 2\n\n\n# plot the first curve by calling plot() function\n# First curve is plotted\nplot(xtime, y1, type=\"o\", col=\"blue\", pch=\"o\", lty=1, ylim=c(20,40), ylab=\"y\" )\n\n\n\n\nStep 3\n\n\n# Add second curve to the same plot by calling points() and lines()\n# Use symbol '*' for points.\nplot(xtime, y1, type=\"o\", col=\"blue\", pch=\"o\", lty=1, ylim=c(20,40), ylab=\"y\" )\npoints(xtime, y2, col=\"red\", pch=\"*\")\nlines(xtime, y2, col=\"red\",lty=2)\n\n\n\n\nStep 4\n\n\n# Add Third curve to the same plot by calling points() and lines()\n# Use the symbol '+' for points.\nplot(xtime, y1, type=\"o\", col=\"blue\", pch=\"o\", lty=1, ylim=c(20,40), ylab=\"y\" )\npoints(xtime, y2, col=\"red\", pch=\"*\")\nlines(xtime, y2, col=\"red\",lty=2)\npoints(xtime, y3, col=\"dark red\",pch=\"+\")\nlines(xtime, y3, col=\"dark red\", lty=3)\n\n\n\n\nStep 5\n\n\n# Adding a legend inside the box at the location (1,37) in graph coordinates.\n# Note that the order of plots are maintained in the vectors of attributes.\nplot(xtime, y1, type=\"o\", col=\"blue\", pch=\"o\", lty=1, ylim=c(20,40), ylab=\"y\" )\npoints(xtime, y2, col=\"red\", pch=\"*\")\nlines(xtime, y2, col=\"red\",lty=2)\npoints(xtime, y3, col=\"dark red\",pch=\"+\")\nlines(xtime, y3, col=\"dark red\", lty=3)\nlegend(1,37,legend=c(\"y1\",\"y2\",\"y3\"), col=c(\"blue\",\"red\",\"black\"),\n       pch=c(\"o\",\"*\",\"+\"),lty=c(1,2,3), ncol=1)\n\n\n\n\nSingle line graph with SPSS\nBelow, I provide the code you can copy and paste in a new SPSS (IBM Spss Statistics for Windows 2013) Syntax file. Then, change the necessary parameters to fit the purpose of your data set.\nGGRAPH\n      /GRAPHDATASET NAME=\"graphdataset\" VARIABLES=x MEAN(y)[name=\"MEAN_y\"] MISSING=LISTWISE \n        REPORTMISSING=NO\n      /GRAPHSPEC SOURCE=INLINE.\n    BEGIN GPL\n      SOURCE: s=userSource(id(\"graphdataset\"))\n      DATA: x=col(source(s), name(\"x\"), unit.category())\n      DATA: MEAN_y=col(source(s), name(\"MEAN_y\"))\n      GUIDE: axis(dim(1), label(\"x\"))\n      GUIDE: axis(dim(2), label(\"Mean y\"))\n      GUIDE: text.title(label(\"Single Line Mean of y by x\"))\n      SCALE: linear(dim(2), include(0))\n      ELEMENT: line(position(x*MEAN_y), missing.wings())\n    END GPL.\n\n\n\nIBM Spss Statistics for Windows. 2013. Armonk, NY: IBM Corp.\n\n\nThis is optional; you can run the script directly in the Console panel in RStudio↩︎\n",
    "preview": "posts/2020-12-29-creating-line-grapghs-with-r/distill-preview.png",
    "last_modified": "2020-12-29T13:52:05-08:00",
    "input_file": "creating-line-grapghs-with-r.utf8.md"
  }
]
